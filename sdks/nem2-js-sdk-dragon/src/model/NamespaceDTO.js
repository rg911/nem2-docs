/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import AliasDTO from './AliasDTO';
import NamespaceTypeEnum from './NamespaceTypeEnum';
import UInt64DTO from './UInt64DTO';





/**
* The NamespaceDTO model module.
* @module model/NamespaceDTO
* @version 0.7.15
*/
export default class NamespaceDTO {
    /**
    * Constructs a new <code>NamespaceDTO</code>.
    * @alias module:model/NamespaceDTO
    * @class
    * @param owner {String} The public key of the owner of the namespace.
    * @param ownerAddress {String} The address of the owner of the namespace in hexadecimal.
    * @param startHeight {module:model/UInt64DTO} 
    * @param endHeight {module:model/UInt64DTO} 
    * @param depth {Number} The level of the namespace.
    * @param level0 {module:model/UInt64DTO} 
    * @param type {module:model/NamespaceTypeEnum} 
    * @param alias {module:model/AliasDTO} 
    * @param parentId {module:model/UInt64DTO} 
    */

    constructor(owner, ownerAddress, startHeight, endHeight, depth, level0, type, alias, parentId) {
        

        
        

        this['owner'] = owner;this['ownerAddress'] = ownerAddress;this['startHeight'] = startHeight;this['endHeight'] = endHeight;this['depth'] = depth;this['level0'] = level0;this['type'] = type;this['alias'] = alias;this['parentId'] = parentId;

        
    }

    /**
    * Constructs a <code>NamespaceDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/NamespaceDTO} obj Optional instance to populate.
    * @return {module:model/NamespaceDTO} The populated <code>NamespaceDTO</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespaceDTO();

            
            
            

            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('ownerAddress')) {
                obj['ownerAddress'] = ApiClient.convertToType(data['ownerAddress'], 'String');
            }
            if (data.hasOwnProperty('startHeight')) {
                obj['startHeight'] = UInt64DTO.constructFromObject(data['startHeight']);
            }
            if (data.hasOwnProperty('endHeight')) {
                obj['endHeight'] = UInt64DTO.constructFromObject(data['endHeight']);
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'Number');
            }
            if (data.hasOwnProperty('level0')) {
                obj['level0'] = UInt64DTO.constructFromObject(data['level0']);
            }
            if (data.hasOwnProperty('level1')) {
                obj['level1'] = UInt64DTO.constructFromObject(data['level1']);
            }
            if (data.hasOwnProperty('level2')) {
                obj['level2'] = UInt64DTO.constructFromObject(data['level2']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = NamespaceTypeEnum.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = AliasDTO.constructFromObject(data['alias']);
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = UInt64DTO.constructFromObject(data['parentId']);
            }
        }
        return obj;
    }

    /**
    * The public key of the owner of the namespace.
    * @member {String} owner
    */
    owner = undefined;
    /**
    * The address of the owner of the namespace in hexadecimal.
    * @member {String} ownerAddress
    */
    ownerAddress = undefined;
    /**
    * @member {module:model/UInt64DTO} startHeight
    */
    startHeight = undefined;
    /**
    * @member {module:model/UInt64DTO} endHeight
    */
    endHeight = undefined;
    /**
    * The level of the namespace.
    * @member {Number} depth
    */
    depth = undefined;
    /**
    * @member {module:model/UInt64DTO} level0
    */
    level0 = undefined;
    /**
    * @member {module:model/UInt64DTO} level1
    */
    level1 = undefined;
    /**
    * @member {module:model/UInt64DTO} level2
    */
    level2 = undefined;
    /**
    * @member {module:model/NamespaceTypeEnum} type
    */
    type = undefined;
    /**
    * @member {module:model/AliasDTO} alias
    */
    alias = undefined;
    /**
    * @member {module:model/UInt64DTO} parentId
    */
    parentId = undefined;








}


