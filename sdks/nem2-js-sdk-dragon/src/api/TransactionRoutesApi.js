/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnnounceTransactionInfoDTO from '../model/AnnounceTransactionInfoDTO';
import TransactionHashes from '../model/TransactionHashes';
import TransactionIds from '../model/TransactionIds';
import TransactionInfoDTO from '../model/TransactionInfoDTO';
import TransactionPayload from '../model/TransactionPayload';
import TransactionStatusDTO from '../model/TransactionStatusDTO';

/**
* TransactionRoutes service.
* @module api/TransactionRoutesApi
* @version 0.7.15
*/
export default class TransactionRoutesApi {

    /**
    * Constructs a new TransactionRoutesApi. 
    * @alias module:api/TransactionRoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Announce a cosignature transaction
     * Announces a cosignature transaction to the network.
     * @param {module:model/TransactionPayload} transactionPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnnounceTransactionInfoDTO} and HTTP response
     */
    announceCosignatureTransactionWithHttpInfo(transactionPayload) {
      let postBody = transactionPayload;

      // verify the required parameter 'transactionPayload' is set
      if (transactionPayload === undefined || transactionPayload === null) {
        throw new Error("Missing the required parameter 'transactionPayload' when calling announceCosignatureTransaction");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnounceTransactionInfoDTO;

      return this.apiClient.callApi(
        '/transaction/cosignature', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Announce a cosignature transaction
     * Announces a cosignature transaction to the network.
     * @param {module:model/TransactionPayload} transactionPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnnounceTransactionInfoDTO}
     */
    announceCosignatureTransaction(transactionPayload) {
      return this.announceCosignatureTransactionWithHttpInfo(transactionPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Announce an aggregate bonded transaction
     * Announces an aggregate bonded transaction to the network.
     * @param {module:model/TransactionPayload} transactionPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnnounceTransactionInfoDTO} and HTTP response
     */
    announcePartialTransactionWithHttpInfo(transactionPayload) {
      let postBody = transactionPayload;

      // verify the required parameter 'transactionPayload' is set
      if (transactionPayload === undefined || transactionPayload === null) {
        throw new Error("Missing the required parameter 'transactionPayload' when calling announcePartialTransaction");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnounceTransactionInfoDTO;

      return this.apiClient.callApi(
        '/transaction/partial', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Announce an aggregate bonded transaction
     * Announces an aggregate bonded transaction to the network.
     * @param {module:model/TransactionPayload} transactionPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnnounceTransactionInfoDTO}
     */
    announcePartialTransaction(transactionPayload) {
      return this.announcePartialTransactionWithHttpInfo(transactionPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Announce a new transaction
     * Announces a transaction to the network. It is recommended to use the NEM2-SDK to announce transactions as they should be serialized. 
     * @param {module:model/TransactionPayload} transactionPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnnounceTransactionInfoDTO} and HTTP response
     */
    announceTransactionWithHttpInfo(transactionPayload) {
      let postBody = transactionPayload;

      // verify the required parameter 'transactionPayload' is set
      if (transactionPayload === undefined || transactionPayload === null) {
        throw new Error("Missing the required parameter 'transactionPayload' when calling announceTransaction");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnnounceTransactionInfoDTO;

      return this.apiClient.callApi(
        '/transaction', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Announce a new transaction
     * Announces a transaction to the network. It is recommended to use the NEM2-SDK to announce transactions as they should be serialized. 
     * @param {module:model/TransactionPayload} transactionPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnnounceTransactionInfoDTO}
     */
    announceTransaction(transactionPayload) {
      return this.announceTransactionWithHttpInfo(transactionPayload)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transaction information
     * Returns transaction information given a transactionId or hash.
     * @param {String} transactionId The transaction id or hash.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionInfoDTO} and HTTP response
     */
    getTransactionWithHttpInfo(transactionId) {
      let postBody = null;

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransaction");
      }


      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionInfoDTO;

      return this.apiClient.callApi(
        '/transaction/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get transaction information
     * Returns transaction information given a transactionId or hash.
     * @param {String} transactionId The transaction id or hash.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionInfoDTO}
     */
    getTransaction(transactionId) {
      return this.getTransactionWithHttpInfo(transactionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transaction status
     * Returns the transaction status for a given hash.
     * @param {String} hash The transaction hash.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransactionStatusDTO} and HTTP response
     */
    getTransactionStatusWithHttpInfo(hash) {
      let postBody = null;

      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getTransactionStatus");
      }


      let pathParams = {
        'hash': hash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionStatusDTO;

      return this.apiClient.callApi(
        '/transaction/{hash}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get transaction status
     * Returns the transaction status for a given hash.
     * @param {String} hash The transaction hash.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransactionStatusDTO}
     */
    getTransactionStatus(hash) {
      return this.getTransactionStatusWithHttpInfo(hash)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transactions information
     * Returns transactions information for a given array of transactionIds.
     * @param {module:model/TransactionIds} transactionIds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionInfoDTO>} and HTTP response
     */
    getTransactionsWithHttpInfo(transactionIds) {
      let postBody = transactionIds;

      // verify the required parameter 'transactionIds' is set
      if (transactionIds === undefined || transactionIds === null) {
        throw new Error("Missing the required parameter 'transactionIds' when calling getTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionInfoDTO];

      return this.apiClient.callApi(
        '/transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get transactions information
     * Returns transactions information for a given array of transactionIds.
     * @param {module:model/TransactionIds} transactionIds 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionInfoDTO>}
     */
    getTransactions(transactionIds) {
      return this.getTransactionsWithHttpInfo(transactionIds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get transactions status.
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * @param {module:model/TransactionHashes} transactionHashes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TransactionStatusDTO>} and HTTP response
     */
    getTransactionsStatusesWithHttpInfo(transactionHashes) {
      let postBody = transactionHashes;

      // verify the required parameter 'transactionHashes' is set
      if (transactionHashes === undefined || transactionHashes === null) {
        throw new Error("Missing the required parameter 'transactionHashes' when calling getTransactionsStatuses");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransactionStatusDTO];

      return this.apiClient.callApi(
        '/transaction/statuses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get transactions status.
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * @param {module:model/TransactionHashes} transactionHashes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TransactionStatusDTO>}
     */
    getTransactionsStatuses(transactionHashes) {
      return this.getTransactionsStatusesWithHttpInfo(transactionHashes)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
