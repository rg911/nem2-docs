/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountIds;
import org.openapitools.client.model.AccountInfoDTO;
import org.openapitools.client.model.AccountNamesDTO;
import org.openapitools.client.model.AccountPropertiesInfoDTO;
import org.openapitools.client.model.MultisigAccountGraphInfoDTO;
import org.openapitools.client.model.MultisigAccountInfoDTO;
import org.openapitools.client.model.TransactionInfoDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountRoutesApi {
    private ApiClient localVarApiClient;

    public AccountRoutesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountRoutesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAccountInfo
     * @param accountId The public key or address of the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountInfoCall(String accountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountInfoValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountInfoCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Get account information
     * Returns the account information.
     * @param accountId The public key or address of the account. (required)
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public AccountInfoDTO getAccountInfo(String accountId) throws ApiException {
        ApiResponse<AccountInfoDTO> localVarResp = getAccountInfoWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get account information
     * Returns the account information.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountInfoDTO> getAccountInfoWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountInfoValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account information (asynchronously)
     * Returns the account information.
     * @param accountId The public key or address of the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountInfoAsync(String accountId, final ApiCallback<AccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountInfoValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountMultisig
     * @param accountId The public key or address of the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountMultisigCall(String accountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{accountId}/multisig"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountMultisigValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountMultisig(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountMultisigCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Get multisig account information
     * Returns the multisig account information.
     * @param accountId The public key or address of the account. (required)
     * @return MultisigAccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public MultisigAccountInfoDTO getAccountMultisig(String accountId) throws ApiException {
        ApiResponse<MultisigAccountInfoDTO> localVarResp = getAccountMultisigWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get multisig account information
     * Returns the multisig account information.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;MultisigAccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultisigAccountInfoDTO> getAccountMultisigWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountMultisigValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MultisigAccountInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multisig account information (asynchronously)
     * Returns the multisig account information.
     * @param accountId The public key or address of the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountMultisigAsync(String accountId, final ApiCallback<MultisigAccountInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountMultisigValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MultisigAccountInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountMultisigGraph
     * @param accountId The public key or address of the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountMultisigGraphCall(String accountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{accountId}/multisig/graph"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountMultisigGraphValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountMultisigGraph(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountMultisigGraphCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Get multisig account graph information
     * Returns the multisig account graph.
     * @param accountId The public key or address of the account. (required)
     * @return List&lt;MultisigAccountGraphInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<MultisigAccountGraphInfoDTO> getAccountMultisigGraph(String accountId) throws ApiException {
        ApiResponse<List<MultisigAccountGraphInfoDTO>> localVarResp = getAccountMultisigGraphWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get multisig account graph information
     * Returns the multisig account graph.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;List&lt;MultisigAccountGraphInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MultisigAccountGraphInfoDTO>> getAccountMultisigGraphWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountMultisigGraphValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<List<MultisigAccountGraphInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multisig account graph information (asynchronously)
     * Returns the multisig account graph.
     * @param accountId The public key or address of the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountMultisigGraphAsync(String accountId, final ApiCallback<List<MultisigAccountGraphInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountMultisigGraphValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<List<MultisigAccountGraphInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountProperties
     * @param accountId The public key or address of the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountPropertiesCall(String accountId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{accountId}/properties/"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountPropertiesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountProperties(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountPropertiesCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * Get account configurable properties information
     * Returns the configurable properties for a given account.
     * @param accountId The public key or address of the account. (required)
     * @return AccountPropertiesInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public AccountPropertiesInfoDTO getAccountProperties(String accountId) throws ApiException {
        ApiResponse<AccountPropertiesInfoDTO> localVarResp = getAccountPropertiesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get account configurable properties information
     * Returns the configurable properties for a given account.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;AccountPropertiesInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountPropertiesInfoDTO> getAccountPropertiesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountPropertiesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<AccountPropertiesInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account configurable properties information (asynchronously)
     * Returns the configurable properties for a given account.
     * @param accountId The public key or address of the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountPropertiesAsync(String accountId, final ApiCallback<AccountPropertiesInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountPropertiesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<AccountPropertiesInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountPropertiesFromAccounts
     * @param accountIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountPropertiesFromAccountsCall(AccountIds accountIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountIds;

        // create path and map variables
        String localVarPath = "/account/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountPropertiesFromAccountsValidateBeforeCall(AccountIds accountIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountIds' is set
        if (accountIds == null) {
            throw new ApiException("Missing the required parameter 'accountIds' when calling getAccountPropertiesFromAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountPropertiesFromAccountsCall(accountIds, _callback);
        return localVarCall;

    }

    /**
     * Get account properties for given array of addresses
     * Returns the configurable properties for a given array of addresses.
     * @param accountIds  (required)
     * @return List&lt;AccountPropertiesInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountPropertiesInfoDTO> getAccountPropertiesFromAccounts(AccountIds accountIds) throws ApiException {
        ApiResponse<List<AccountPropertiesInfoDTO>> localVarResp = getAccountPropertiesFromAccountsWithHttpInfo(accountIds);
        return localVarResp.getData();
    }

    /**
     * Get account properties for given array of addresses
     * Returns the configurable properties for a given array of addresses.
     * @param accountIds  (required)
     * @return ApiResponse&lt;List&lt;AccountPropertiesInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountPropertiesInfoDTO>> getAccountPropertiesFromAccountsWithHttpInfo(AccountIds accountIds) throws ApiException {
        okhttp3.Call localVarCall = getAccountPropertiesFromAccountsValidateBeforeCall(accountIds, null);
        Type localVarReturnType = new TypeToken<List<AccountPropertiesInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get account properties for given array of addresses (asynchronously)
     * Returns the configurable properties for a given array of addresses.
     * @param accountIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountPropertiesFromAccountsAsync(AccountIds accountIds, final ApiCallback<List<AccountPropertiesInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountPropertiesFromAccountsValidateBeforeCall(accountIds, _callback);
        Type localVarReturnType = new TypeToken<List<AccountPropertiesInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsInfo
     * @param accountIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsInfoCall(AccountIds accountIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountIds;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsInfoValidateBeforeCall(AccountIds accountIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountIds' is set
        if (accountIds == null) {
            throw new ApiException("Missing the required parameter 'accountIds' when calling getAccountsInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountsInfoCall(accountIds, _callback);
        return localVarCall;

    }

    /**
     * Get accounts information
     * Returns the account information for an array of accounts.
     * @param accountIds  (required)
     * @return List&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountInfoDTO> getAccountsInfo(AccountIds accountIds) throws ApiException {
        ApiResponse<List<AccountInfoDTO>> localVarResp = getAccountsInfoWithHttpInfo(accountIds);
        return localVarResp.getData();
    }

    /**
     * Get accounts information
     * Returns the account information for an array of accounts.
     * @param accountIds  (required)
     * @return ApiResponse&lt;List&lt;AccountInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountInfoDTO>> getAccountsInfoWithHttpInfo(AccountIds accountIds) throws ApiException {
        okhttp3.Call localVarCall = getAccountsInfoValidateBeforeCall(accountIds, null);
        Type localVarReturnType = new TypeToken<List<AccountInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get accounts information (asynchronously)
     * Returns the account information for an array of accounts.
     * @param accountIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsInfoAsync(AccountIds accountIds, final ApiCallback<List<AccountInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsInfoValidateBeforeCall(accountIds, _callback);
        Type localVarReturnType = new TypeToken<List<AccountInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountsNames
     * @param accountIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsNamesCall(AccountIds accountIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountIds;

        // create path and map variables
        String localVarPath = "/account/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsNamesValidateBeforeCall(AccountIds accountIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountIds' is set
        if (accountIds == null) {
            throw new ApiException("Missing the required parameter 'accountIds' when calling getAccountsNames(Async)");
        }
        

        okhttp3.Call localVarCall = getAccountsNamesCall(accountIds, _callback);
        return localVarCall;

    }

    /**
     * Get readable names for a set of accountIds.
     * Returns friendly names for accounts.
     * @param accountIds  (required)
     * @return List&lt;AccountNamesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<AccountNamesDTO> getAccountsNames(AccountIds accountIds) throws ApiException {
        ApiResponse<List<AccountNamesDTO>> localVarResp = getAccountsNamesWithHttpInfo(accountIds);
        return localVarResp.getData();
    }

    /**
     * Get readable names for a set of accountIds.
     * Returns friendly names for accounts.
     * @param accountIds  (required)
     * @return ApiResponse&lt;List&lt;AccountNamesDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AccountNamesDTO>> getAccountsNamesWithHttpInfo(AccountIds accountIds) throws ApiException {
        okhttp3.Call localVarCall = getAccountsNamesValidateBeforeCall(accountIds, null);
        Type localVarReturnType = new TypeToken<List<AccountNamesDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get readable names for a set of accountIds. (asynchronously)
     * Returns friendly names for accounts.
     * @param accountIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsNamesAsync(AccountIds accountIds, final ApiCallback<List<AccountNamesDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsNamesValidateBeforeCall(accountIds, _callback);
        Type localVarReturnType = new TypeToken<List<AccountNamesDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomingTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomingTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/incoming"
            .replaceAll("\\{" + "publicKey" + "\\}", localVarApiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomingTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling incomingTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = incomingTransactionsCall(publicKey, pageSize, id, ordering, _callback);
        return localVarCall;

    }

    /**
     * Get incoming transactions
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return List&lt;TransactionInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionInfoDTO> incomingTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<TransactionInfoDTO>> localVarResp = incomingTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return localVarResp.getData();
    }

    /**
     * Get incoming transactions
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return ApiResponse&lt;List&lt;TransactionInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionInfoDTO>> incomingTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        okhttp3.Call localVarCall = incomingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get incoming transactions (asynchronously)
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call incomingTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<TransactionInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outgoingTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outgoingTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/outgoing"
            .replaceAll("\\{" + "publicKey" + "\\}", localVarApiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outgoingTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling outgoingTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = outgoingTransactionsCall(publicKey, pageSize, id, ordering, _callback);
        return localVarCall;

    }

    /**
     * Get outgoing transactions
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return List&lt;TransactionInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionInfoDTO> outgoingTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<TransactionInfoDTO>> localVarResp = outgoingTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return localVarResp.getData();
    }

    /**
     * Get outgoing transactions
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return ApiResponse&lt;List&lt;TransactionInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionInfoDTO>> outgoingTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        okhttp3.Call localVarCall = outgoingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get outgoing transactions (asynchronously)
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outgoingTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<TransactionInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = outgoingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/partial"
            .replaceAll("\\{" + "publicKey" + "\\}", localVarApiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling partialTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = partialTransactionsCall(publicKey, pageSize, id, ordering, _callback);
        return localVarCall;

    }

    /**
     * Get aggregate bonded transactions information
     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return List&lt;TransactionInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionInfoDTO> partialTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<TransactionInfoDTO>> localVarResp = partialTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return localVarResp.getData();
    }

    /**
     * Get aggregate bonded transactions information
     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return ApiResponse&lt;List&lt;TransactionInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionInfoDTO>> partialTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        okhttp3.Call localVarCall = partialTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get aggregate bonded transactions information (asynchronously)
     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<TransactionInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions"
            .replaceAll("\\{" + "publicKey" + "\\}", localVarApiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling transactions(Async)");
        }
        

        okhttp3.Call localVarCall = transactionsCall(publicKey, pageSize, id, ordering, _callback);
        return localVarCall;

    }

    /**
     * Get confirmed transactions
     * Gets an array of transactions for which an account is the sender or receiver.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return List&lt;TransactionInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionInfoDTO> transactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<TransactionInfoDTO>> localVarResp = transactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return localVarResp.getData();
    }

    /**
     * Get confirmed transactions
     * Gets an array of transactions for which an account is the sender or receiver.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return ApiResponse&lt;List&lt;TransactionInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionInfoDTO>> transactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        okhttp3.Call localVarCall = transactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get confirmed transactions (asynchronously)
     * Gets an array of transactions for which an account is the sender or receiver.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria: * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<TransactionInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsValidateBeforeCall(publicKey, pageSize, id, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unconfirmedTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unconfirmedTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/unconfirmed"
            .replaceAll("\\{" + "publicKey" + "\\}", localVarApiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unconfirmedTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling unconfirmedTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = unconfirmedTransactionsCall(publicKey, pageSize, id, ordering, _callback);
        return localVarCall;

    }

    /**
     * Get unconfirmed transactions
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return List&lt;TransactionInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionInfoDTO> unconfirmedTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<TransactionInfoDTO>> localVarResp = unconfirmedTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return localVarResp.getData();
    }

    /**
     * Get unconfirmed transactions
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @return ApiResponse&lt;List&lt;TransactionInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionInfoDTO>> unconfirmedTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        okhttp3.Call localVarCall = unconfirmedTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get unconfirmed transactions (asynchronously)
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id - Descending order by id. * id - Ascending order by id.  (optional, default to &quot;-id&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unconfirmedTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<TransactionInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = unconfirmedTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
