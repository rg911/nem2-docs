/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountIds;
import org.openapitools.client.model.NamespaceIds;
import org.openapitools.client.model.NamespaceInfoDTO;
import org.openapitools.client.model.NamespaceNameDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamespaceRoutesApi {
    private ApiClient localVarApiClient;

    public NamespaceRoutesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamespaceRoutesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getNamespace
     * @param namespaceId The namespace identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceCall(String namespaceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/namespace/{namespaceId}"
            .replaceAll("\\{" + "namespaceId" + "\\}", localVarApiClient.escapeString(namespaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespaceValidateBeforeCall(String namespaceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling getNamespace(Async)");
        }
        

        okhttp3.Call localVarCall = getNamespaceCall(namespaceId, _callback);
        return localVarCall;

    }

    /**
     * Get namespace information
     * Gets the namespace for a given namespaceId.
     * @param namespaceId The namespace identifier. (required)
     * @return NamespaceInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public NamespaceInfoDTO getNamespace(String namespaceId) throws ApiException {
        ApiResponse<NamespaceInfoDTO> localVarResp = getNamespaceWithHttpInfo(namespaceId);
        return localVarResp.getData();
    }

    /**
     * Get namespace information
     * Gets the namespace for a given namespaceId.
     * @param namespaceId The namespace identifier. (required)
     * @return ApiResponse&lt;NamespaceInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamespaceInfoDTO> getNamespaceWithHttpInfo(String namespaceId) throws ApiException {
        okhttp3.Call localVarCall = getNamespaceValidateBeforeCall(namespaceId, null);
        Type localVarReturnType = new TypeToken<NamespaceInfoDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get namespace information (asynchronously)
     * Gets the namespace for a given namespaceId.
     * @param namespaceId The namespace identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> resource not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespaceAsync(String namespaceId, final ApiCallback<NamespaceInfoDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespaceValidateBeforeCall(namespaceId, _callback);
        Type localVarReturnType = new TypeToken<NamespaceInfoDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespacesFromAccount
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesFromAccountCall(String accountId, Integer pageSize, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/account/{accountId}/namespaces"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacesFromAccountValidateBeforeCall(String accountId, Integer pageSize, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getNamespacesFromAccount(Async)");
        }
        

        okhttp3.Call localVarCall = getNamespacesFromAccountCall(accountId, pageSize, id, _callback);
        return localVarCall;

    }

    /**
     * Get namespaces owned by an account
     * Gets an array of namespaces for a given account address.
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return List&lt;NamespaceInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<NamespaceInfoDTO> getNamespacesFromAccount(String accountId, Integer pageSize, String id) throws ApiException {
        ApiResponse<List<NamespaceInfoDTO>> localVarResp = getNamespacesFromAccountWithHttpInfo(accountId, pageSize, id);
        return localVarResp.getData();
    }

    /**
     * Get namespaces owned by an account
     * Gets an array of namespaces for a given account address.
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return ApiResponse&lt;List&lt;NamespaceInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NamespaceInfoDTO>> getNamespacesFromAccountWithHttpInfo(String accountId, Integer pageSize, String id) throws ApiException {
        okhttp3.Call localVarCall = getNamespacesFromAccountValidateBeforeCall(accountId, pageSize, id, null);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get namespaces owned by an account (asynchronously)
     * Gets an array of namespaces for a given account address.
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesFromAccountAsync(String accountId, Integer pageSize, String id, final ApiCallback<List<NamespaceInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacesFromAccountValidateBeforeCall(accountId, pageSize, id, _callback);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespacesFromAccounts
     * @param accountIds  (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesFromAccountsCall(AccountIds accountIds, Integer pageSize, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = accountIds;

        // create path and map variables
        String localVarPath = "/account/namespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacesFromAccountsValidateBeforeCall(AccountIds accountIds, Integer pageSize, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountIds' is set
        if (accountIds == null) {
            throw new ApiException("Missing the required parameter 'accountIds' when calling getNamespacesFromAccounts(Async)");
        }
        

        okhttp3.Call localVarCall = getNamespacesFromAccountsCall(accountIds, pageSize, id, _callback);
        return localVarCall;

    }

    /**
     * Get namespaces for given array of addresses
     * Gets namespaces for a given array of addresses.
     * @param accountIds  (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return List&lt;NamespaceInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<NamespaceInfoDTO> getNamespacesFromAccounts(AccountIds accountIds, Integer pageSize, String id) throws ApiException {
        ApiResponse<List<NamespaceInfoDTO>> localVarResp = getNamespacesFromAccountsWithHttpInfo(accountIds, pageSize, id);
        return localVarResp.getData();
    }

    /**
     * Get namespaces for given array of addresses
     * Gets namespaces for a given array of addresses.
     * @param accountIds  (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return ApiResponse&lt;List&lt;NamespaceInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NamespaceInfoDTO>> getNamespacesFromAccountsWithHttpInfo(AccountIds accountIds, Integer pageSize, String id) throws ApiException {
        okhttp3.Call localVarCall = getNamespacesFromAccountsValidateBeforeCall(accountIds, pageSize, id, null);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get namespaces for given array of addresses (asynchronously)
     * Gets namespaces for a given array of addresses.
     * @param accountIds  (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesFromAccountsAsync(AccountIds accountIds, Integer pageSize, String id, final ApiCallback<List<NamespaceInfoDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacesFromAccountsValidateBeforeCall(accountIds, pageSize, id, _callback);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamespacesNames
     * @param namespaceIds  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesNamesCall(NamespaceIds namespaceIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = namespaceIds;

        // create path and map variables
        String localVarPath = "/namespace/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamespacesNamesValidateBeforeCall(NamespaceIds namespaceIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespaceIds' is set
        if (namespaceIds == null) {
            throw new ApiException("Missing the required parameter 'namespaceIds' when calling getNamespacesNames(Async)");
        }
        

        okhttp3.Call localVarCall = getNamespacesNamesCall(namespaceIds, _callback);
        return localVarCall;

    }

    /**
     * Get readable names for a set of namespaces
     * Returns friendly names for namespaces.
     * @param namespaceIds  (required)
     * @return List&lt;NamespaceNameDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public List<NamespaceNameDTO> getNamespacesNames(NamespaceIds namespaceIds) throws ApiException {
        ApiResponse<List<NamespaceNameDTO>> localVarResp = getNamespacesNamesWithHttpInfo(namespaceIds);
        return localVarResp.getData();
    }

    /**
     * Get readable names for a set of namespaces
     * Returns friendly names for namespaces.
     * @param namespaceIds  (required)
     * @return ApiResponse&lt;List&lt;NamespaceNameDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NamespaceNameDTO>> getNamespacesNamesWithHttpInfo(NamespaceIds namespaceIds) throws ApiException {
        okhttp3.Call localVarCall = getNamespacesNamesValidateBeforeCall(namespaceIds, null);
        Type localVarReturnType = new TypeToken<List<NamespaceNameDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get readable names for a set of namespaces (asynchronously)
     * Returns friendly names for namespaces.
     * @param namespaceIds  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid content </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> invalid argument </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamespacesNamesAsync(NamespaceIds namespaceIds, final ApiCallback<List<NamespaceNameDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamespacesNamesValidateBeforeCall(namespaceIds, _callback);
        Type localVarReturnType = new TypeToken<List<NamespaceNameDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
