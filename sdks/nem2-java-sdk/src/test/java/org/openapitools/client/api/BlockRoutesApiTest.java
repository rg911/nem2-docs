/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BlockInfoDTO;
import org.openapitools.client.model.MerkleProofInfoDTO;
import org.openapitools.client.model.StatementsDTO;
import org.openapitools.client.model.TransactionInfoDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BlockRoutesApi
 */
@Ignore
public class BlockRoutesApiTest {

    private final BlockRoutesApi api = new BlockRoutesApi();

    
    /**
     * Get block information
     *
     * Gets a block from the chain that has the given height.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockByHeightTest() throws ApiException {
        Long height = null;
        BlockInfoDTO response = api.getBlockByHeight(height);

        // TODO: test validations
    }
    
    /**
     * Get receipts from a block
     *
     * Returns the receipts linked to a block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockReceiptsTest() throws ApiException {
        Long height = null;
        StatementsDTO response = api.getBlockReceipts(height);

        // TODO: test validations
    }
    
    /**
     * Get transactions from a block
     *
     * Returns an array of transactions included in a block for a given block height.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockTransactionsTest() throws ApiException {
        Long height = null;
        Integer pageSize = null;
        String id = null;
        List<TransactionInfoDTO> response = api.getBlockTransactions(height, pageSize, id);

        // TODO: test validations
    }
    
    /**
     * Get blocks information
     *
     * Gets up to limit number of blocks after given block height.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlocksByHeightWithLimitTest() throws ApiException {
        Long height = null;
        Integer limit = null;
        List<BlockInfoDTO> response = api.getBlocksByHeightWithLimit(height, limit);

        // TODO: test validations
    }
    
    /**
     * Get the merkle path for a given a receipt statement hash and block
     *
     * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMerkleReceiptsTest() throws ApiException {
        Long height = null;
        String hash = null;
        MerkleProofInfoDTO response = api.getMerkleReceipts(height, hash);

        // TODO: test validations
    }
    
    /**
     * Get the merkle path for a given a transaction and block
     *
     * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMerkleTransactionTest() throws ApiException {
        Long height = null;
        String hash = null;
        MerkleProofInfoDTO response = api.getMerkleTransaction(height, hash);

        // TODO: test validations
    }
    
}
