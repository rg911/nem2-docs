/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnounceTransactionInfoDTO;
import org.openapitools.client.model.Cosignature;
import org.openapitools.client.model.TransactionHashes;
import org.openapitools.client.model.TransactionIds;
import org.openapitools.client.model.TransactionInfoDTO;
import org.openapitools.client.model.TransactionPayload;
import org.openapitools.client.model.TransactionStatusDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionRoutesApi
 */
@Ignore
public class TransactionRoutesApiTest {

    private final TransactionRoutesApi api = new TransactionRoutesApi();

    
    /**
     * Announce a cosignature transaction
     *
     * Announces a cosignature transaction to the network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void announceCosignatureTransactionTest() throws ApiException {
        Cosignature cosignature = null;
        AnnounceTransactionInfoDTO response = api.announceCosignatureTransaction(cosignature);

        // TODO: test validations
    }
    
    /**
     * Announce an aggregate bonded transaction
     *
     * Announces an aggregate bonded transaction to the network.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void announcePartialTransactionTest() throws ApiException {
        TransactionPayload transactionPayload = null;
        AnnounceTransactionInfoDTO response = api.announcePartialTransaction(transactionPayload);

        // TODO: test validations
    }
    
    /**
     * Announce a new transaction
     *
     * Announces a transaction to the network. It is recommended to use the NEM2-SDK to announce transactions as they should be serialized. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void announceTransactionTest() throws ApiException {
        TransactionPayload transactionPayload = null;
        AnnounceTransactionInfoDTO response = api.announceTransaction(transactionPayload);

        // TODO: test validations
    }
    
    /**
     * Get transaction information
     *
     * Returns transaction information given a transactionId or hash.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        String transactionId = null;
        TransactionInfoDTO response = api.getTransaction(transactionId);

        // TODO: test validations
    }
    
    /**
     * Get transaction status
     *
     * Returns the transaction status for a given hash.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionStatusTest() throws ApiException {
        String hash = null;
        TransactionStatusDTO response = api.getTransactionStatus(hash);

        // TODO: test validations
    }
    
    /**
     * Get transactions information
     *
     * Returns transactions information for a given array of transactionIds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        TransactionIds transactionIds = null;
        List<TransactionInfoDTO> response = api.getTransactions(transactionIds);

        // TODO: test validations
    }
    
    /**
     * Get transactions status.
     *
     * Returns an array of transaction statuses for a given array of transaction hashes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsStatusesTest() throws ApiException {
        TransactionHashes transactionHashes = null;
        List<TransactionStatusDTO> response = api.getTransactionsStatuses(transactionHashes);

        // TODO: test validations
    }
    
}
