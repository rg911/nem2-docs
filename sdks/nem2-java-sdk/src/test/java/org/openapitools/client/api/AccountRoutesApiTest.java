/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountIds;
import org.openapitools.client.model.AccountInfoDTO;
import org.openapitools.client.model.AccountNamesDTO;
import org.openapitools.client.model.AccountPropertiesInfoDTO;
import org.openapitools.client.model.MultisigAccountGraphInfoDTO;
import org.openapitools.client.model.MultisigAccountInfoDTO;
import org.openapitools.client.model.TransactionInfoDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountRoutesApi
 */
@Ignore
public class AccountRoutesApiTest {

    private final AccountRoutesApi api = new AccountRoutesApi();

    
    /**
     * Get account information
     *
     * Returns the account information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountInfoTest() throws ApiException {
        String accountId = null;
        AccountInfoDTO response = api.getAccountInfo(accountId);

        // TODO: test validations
    }
    
    /**
     * Get multisig account information
     *
     * Returns the multisig account information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountMultisigTest() throws ApiException {
        String accountId = null;
        MultisigAccountInfoDTO response = api.getAccountMultisig(accountId);

        // TODO: test validations
    }
    
    /**
     * Get multisig account graph information
     *
     * Returns the multisig account graph.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountMultisigGraphTest() throws ApiException {
        String accountId = null;
        List<MultisigAccountGraphInfoDTO> response = api.getAccountMultisigGraph(accountId);

        // TODO: test validations
    }
    
    /**
     * Get account configurable properties information
     *
     * Returns the configurable properties for a given account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPropertiesTest() throws ApiException {
        String accountId = null;
        AccountPropertiesInfoDTO response = api.getAccountProperties(accountId);

        // TODO: test validations
    }
    
    /**
     * Get account properties for given array of addresses
     *
     * Returns the configurable properties for a given array of addresses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPropertiesFromAccountsTest() throws ApiException {
        AccountIds accountIds = null;
        List<AccountPropertiesInfoDTO> response = api.getAccountPropertiesFromAccounts(accountIds);

        // TODO: test validations
    }
    
    /**
     * Get accounts information
     *
     * Returns the account information for an array of accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsInfoTest() throws ApiException {
        AccountIds accountIds = null;
        List<AccountInfoDTO> response = api.getAccountsInfo(accountIds);

        // TODO: test validations
    }
    
    /**
     * Get readable names for a set of accountIds.
     *
     * Returns friendly names for accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsNamesTest() throws ApiException {
        AccountIds accountIds = null;
        List<AccountNamesDTO> response = api.getAccountsNames(accountIds);

        // TODO: test validations
    }
    
    /**
     * Get incoming transactions
     *
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void incomingTransactionsTest() throws ApiException {
        String publicKey = null;
        Integer pageSize = null;
        String id = null;
        String ordering = null;
        List<TransactionInfoDTO> response = api.incomingTransactions(publicKey, pageSize, id, ordering);

        // TODO: test validations
    }
    
    /**
     * Get outgoing transactions
     *
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outgoingTransactionsTest() throws ApiException {
        String publicKey = null;
        Integer pageSize = null;
        String id = null;
        String ordering = null;
        List<TransactionInfoDTO> response = api.outgoingTransactions(publicKey, pageSize, id, ordering);

        // TODO: test validations
    }
    
    /**
     * Get aggregate bonded transactions information
     *
     * Gets an array of aggregate bonded transactions where the account is the sender or requires to cosign the transaction. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partialTransactionsTest() throws ApiException {
        String publicKey = null;
        Integer pageSize = null;
        String id = null;
        String ordering = null;
        List<TransactionInfoDTO> response = api.partialTransactions(publicKey, pageSize, id, ordering);

        // TODO: test validations
    }
    
    /**
     * Get confirmed transactions
     *
     * Gets an array of transactions for which an account is the sender or receiver.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transactionsTest() throws ApiException {
        String publicKey = null;
        Integer pageSize = null;
        String id = null;
        String ordering = null;
        List<TransactionInfoDTO> response = api.transactions(publicKey, pageSize, id, ordering);

        // TODO: test validations
    }
    
    /**
     * Get unconfirmed transactions
     *
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unconfirmedTransactionsTest() throws ApiException {
        String publicKey = null;
        Integer pageSize = null;
        String id = null;
        String ordering = null;
        List<TransactionInfoDTO> response = api.unconfirmedTransactions(publicKey, pageSize, id, ordering);

        // TODO: test validations
    }
    
}
