/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BlockchainScoreDTO;
import org.openapitools.client.model.HeightInfoDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChainRoutesApi
 */
@Ignore
public class ChainRoutesApiTest {

    private final ChainRoutesApi api = new ChainRoutesApi();

    
    /**
     * Get the current height of the chain
     *
     * Returns the current height of the blockchain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockchainHeightTest() throws ApiException {
        HeightInfoDTO response = api.getBlockchainHeight();

        // TODO: test validations
    }
    
    /**
     * Get the current score of the chain
     *
     * Gets the current score of the blockchain. The higher the score, the better the chain. During synchronization, nodes try to get the best blockchain in the network.  The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:      block score &#x3D; difficulty âˆ’ time elapsed since last block 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockchainScoreTest() throws ApiException {
        BlockchainScoreDTO response = api.getBlockchainScore();

        // TODO: test validations
    }
    
}
