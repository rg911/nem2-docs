swagger: '2.0'
info:
  version: 0.7.17
  title: Catapult REST Endpoints
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  description: |

host: 'localhost:3000'

tags:
  - name: Account routes
    description: Account related endpoints.
  - name: Block routes
    description: Blockrelated endpoints.
  - name: Chain routes
    description: Chain related endpoints.
  - name: Diagnostic routes
    description: Diagnostic related endpoints.
  - name: Mosaic routes
    description: Mosaic related endpoints.
  - name: Namespace routes
    description: Namespace related endpoints.
  - name: Transaction routes
    description: Transaction related endpoints.
  - name: Network routes
    description: Network related endpoints.
  - name: Node routes
    description: Node related endpoints.

schemes:
  - http
paths:
  "/account/{accountId}":
    get:
      tags:
        - Account routes
      summary: Get account information
      description: Returns the account information.
      operationId: getAccountInfo
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          type: string
          description: Public key or address of the account.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/AccountInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /account:
    post:
      tags:
        - Account routes
      summary: Get accounts information
      description: Returns the account information for an array of accounts.
      operationId: getAccountsInfo
      produces:
        - application/json
      parameters:
        - name: accountIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/accountIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of accounts information.
            items:
              $ref: "#/definitions/AccountInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/account/{publicKey}/transactions":
    get:
      tags:
        - Account routes
      summary: Get confirmed transactions
      description: Gets an array of transactions for which an account is the sender or
        receiver.
      operationId: transactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          type: string
          description: Public key of the account.
          required: true
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of transactions to return for each request.
          minimum: 10
          maximum: 100
          default: 10
        - name: id
          in: query
          type: string
          description: |
           Transaction identifier up to which transactions are returned.
        - name: ordering
          in: query
          type: string
          description: |
            Ordering criteria:
            * -id - Descending order by id.
            * id - Ascending order by id.
          default: -id
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of confirmed transactions.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "409":
          description: invalid argument
  "/account/{publicKey}/transactions/incoming":
    get:
      tags:
        - Account routes
      summary: Get incoming transactions
      description: |
        Gets an array of incoming transactions. A transaction is said to be
        incoming with respect to an account if the account is the recipient of
        the transaction.
      operationId: incomingTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          type: string
          description: Public key of the account.
          required: true
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of transactions to return for each request.
          minimum: 10
          maximum: 100
          default: 10
        - name: id
          in: query
          type: string
          description: |
           Transaction identifier up to which transactions are returned.
        - name: ordering
          in: query
          type: string
          description: |
            Ordering criteria:
            * -id - Descending order by id.
            * id - Ascending order by id.
          default: -id
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of incoming transactions.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "409":
          description: invalid argument
  "/account/{publicKey}/transactions/outgoing":
    get:
      tags:
        - Account routes
      summary: Get outgoing transactions
      description: Gets an array of outgoing transactions. A transaction is said to be
        outgoing with respect to an account if the account is the sender of the
        transaction.
      operationId: outgoingTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          type: string
          description: Public key of the account.
          required: true
        - name: pageSize
          in: query
          description: Number of transactions to return for each request.
          type: integer
          format: int32
          minimum: 10
          maximum: 100
          default: 10
        - name: id
          in: query
          type: string
          description: |
           Transaction identifier up to which transactions are returned.
        - name: ordering
          in: query
          type: string
          description: |
            Ordering criteria:
            * -id - Descending order by id.
            * id - Ascending order by id.
          default: -id
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of outgoing transactions.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "409":
          description: invalid argument
  "/account/{publicKey}/transactions/unconfirmed":
    get:
      tags:
        - Account routes
      summary: Get unconfirmed transactions
      description: |
        Gets the array of transactions not included in a block where an account
        is the sender or receiver.
      operationId: unconfirmedTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          type: string
          description: Public key of the account.
          required: true
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of transactions to return for each request.
          minimum: 10
          maximum: 100
          default: 10
        - name: id
          in: query
          type: string
          description: |
           Transaction identifier up to which transactions are returned.
        - name: ordering
          in: query
          type: string
          description: |
            Ordering criteria:
            * -id - Descending order by id.
            * id - Ascending order by id.
          default: -id
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of unconfirmed transactions.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "409":
          description: invalid argument
  "/account/{publicKey}/transactions/partial":
    get:
      tags:
        - Account routes
      summary: Get aggregate bonded transactions information
      description: |
        Gets an array of aggregate bonded transactions where the account is the sender
        or requires to cosign the transaction.
      operationId: partialTransactions
      produces:
        - application/json
      parameters:
        - name: publicKey
          in: path
          type: string
          description: Public key of the account.
          required: true
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of transactions to return for each request.
          minimum: 10
          maximum: 100
          default: 10
        - name: id
          in: query
          type: string
          description: |
           Transaction identifier up to which transactions are returned.
        - name: ordering
          in: query
          type: string
          description: |
            Ordering criteria:
            * -id - Descending order by id.
            * id - Ascending order by id.
          default: -id
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of aggregate bonded transactions.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "409":
          description: invalid argument
  "/account/{accountId}/restrictions/":
    get:
      tags:
        - Account routes
      summary: Get the account restrictions
      description: Returns the account restrictions for a given account.
      operationId: getAccountRestrictions
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          type: string
          description: Public key or address of the account.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/AccountRestrictionsInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /account/restrictions:
    post:
      tags:
        - Account routes
      summary: Get account restrictions for given array of addresses
      description: Returns the account restrictions for a given array of addresses.
      operationId: getAccountRestrictionsFromAccounts
      produces:
        - application/json
      parameters:
        - name: accountIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/accountIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of account restrictions.
            items:
              $ref: "#/definitions/AccountRestrictionsInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/account/{accountId}/multisig":
    get:
      tags:
        - Account routes
      summary: Get multisig account information
      description: Returns the multisig account information.
      operationId: getAccountMultisig
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          type: string
          description: Public key or address of the account.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/MultisigAccountInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/account/{accountId}/multisig/graph":
    get:
      tags:
        - Account routes
      summary: Get multisig account graph information
      description: Returns the multisig account graph.
      operationId: getAccountMultisigGraph
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          type: string
          description: Public key or address of the account.
          required: true
      responses:
        "200":
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/MultisigAccountGraphInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/blocks/{height}/limit/{limit}":
    get:
      tags:
        - Block routes
      summary: Get blocks information
      description: Gets up to limit number of blocks after given block height.
      operationId: getBlocksByHeightWithLimit
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          type: integer
          format: int64
          description: Height of the block. If height -1 is not a multiple of the limit
            provided, the inferior closest multiple + 1 is used instead.
          required: true
          minimum: 1
        - name: limit
          in: path
          description: Number of blocks to be returned.
          type: integer
          format: int32
          required: true
          enum:
            - 25
            - 50
            - 75
            - 100
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of blocks information.
            items:
              $ref: "#/definitions/BlockInfoDTO"
        "409":
          description: invalid argument
  "/block/{height}":
    get:
      tags:
        - Block routes
      summary: Get block information
      description: Gets a block from the chain that has the given height.
      operationId: getBlockByHeight
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          type: integer
          format: int64
          description: Height of the block.
          required: true
          minimum: 1
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/BlockInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/transactions":
    get:
      tags:
        - Block routes
      summary: Get transactions from a block
      description: Returns an array of transactions included in a block for a given block height.
      operationId: getBlockTransactions
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          type: integer
          format: int64
          description: Height of the block.
          required: true
          minimum: 1
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of transactions to return for each request.
          minimum: 10
          maximum: 100
          default: 10
        - name: id
          type: string
          in: query
          description: Transaction identifier up to which transactions are returned.
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of transactions.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/transaction/{hash}/merkle":
    get:
      tags:
        - Block routes
      summary: Get the merkle path for a given a transaction and block
      description: |
        Returns the merkle path for a transaction included in a block. The path is the complementary data needed to
        calculate the merkle root. A client can compare if the calculated root
        equals the one recorded in the block header, verifying that the
        transaction was included in the block.
      operationId: getMerkleTransaction
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          type: integer
          format: int64
          description: Height of the block.
          required: true
          minimum: 1
        - name: hash
          in: path
          type: string
          description: Hash of the transaction.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/MerkleProofInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/receipts":
    get:
      tags:
        - Block routes
      summary: Get receipts from a block
      description: Returns the receipts linked to a block.
      operationId: getBlockReceipts
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          type: integer
          format: int64
          description: Height of the block.
          required: true
          minimum: 1
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/StatementsDTO"

        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/block/{height}/receipt/{hash}/merkle":
    get:
      tags:
        - Block routes
      summary: Get the merkle path for a given a receipt statement hash and block
      description: |
        Returns the merkle path for a receipt statement or resolution linked to a block.
        The path is the complementary data needed to calculate the merkle root. A client
        can compare if the calculated root equals the one recorded in the block header, verifying that
        the receipt was linked with the block.
      operationId: getMerkleReceipts
      produces:
        - application/json
      parameters:
        - name: height
          in: path
          type: integer
          format: int64
          description: Height of the block.
          required: true
          minimum: 1
        - name: hash
          in: path
          type: string
          description: Hash of the receipt statement or resolution.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/MerkleProofInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /chain/height:
    get:
      tags:
        - Chain routes
      summary: Get the current height of the chain
      description: Returns the current height of the blockchain.
      operationId: getBlockchainHeight
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/HeightInfoDTO"
  /chain/score:
    get:
      tags:
        - Chain routes
      summary: Get the current score of the chain
      description: |
        Gets the current score of the blockchain. The higher the score, the
        better the chain. During synchronization, nodes try to get the best
        blockchain in the network.

        The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:

            block score = difficulty − time elapsed since last block
      operationId: getBlockchainScore
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/BlockchainScoreDTO"
  /diagnostic/storage:
    get:
      tags:
        - Diagnostic routes
      summary: Get the storage information of the node
      description: Returns diagnostic information about the node storage.
      operationId: getDiagnosticStorage
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/StorageInfoDTO"
  /diagnostic/server:
    get:
      tags:
        - Diagnostic routes
      summary: Get the version of the running rest component
      description: Returns the version of the running rest component.
      operationId: getServerInfo
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/ServerDTO"
  "/mosaic/{mosaicId}":
    get:
      tags:
        - Mosaic routes
      summary: Get mosaic information
      description: Gets the mosaic definition for a given mosaicId.
      operationId: getMosaic
      produces:
        - application/json
      parameters:
        - name: mosaicId
          in: path
          type: string
          description: Identifier of the mosaic.
          required: true
          format: hex
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/MosaicInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /mosaic:
    post:
      tags:
        - Mosaic routes
      summary: Get mosaics information for an array of mosaics
      description: Gets an array of mosaic definition.
      operationId: getMosaics
      produces:
        - application/json
      parameters:
        - name: mosaicIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/mosaicIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of mosaics information.
            items:
              $ref: "#/definitions/MosaicInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /mosaic/names:
    post:
      tags:
        - Mosaic routes
      summary: Get readable names for a set of mosaics
      description: Returns friendly names for mosaics.
      operationId: getMosaicsNames
      produces:
        - application/json
      parameters:
        - name: mosaicIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/mosaicIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of mosaic names.
            items:
              $ref: "#/definitions/MosaicNamesDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/namespace/{namespaceId}":
    get:
      tags:
        - Namespace routes
      summary: Get namespace information
      description: Gets the namespace for a given namespaceId.
      operationId: getNamespace
      produces:
        - application/json
      parameters:
        - name: namespaceId
          in: path
          type: string
          description: Identifier of the namespace.
          required: true
          format: hex
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/NamespaceInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  "/account/{accountId}/namespaces":
    get:
      tags:
        - Namespace routes
      summary: Get namespaces owned by an account
      description: Gets an array of namespaces for a given account address.
      operationId: getNamespacesFromAccount
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          type: string
          description: Address or public key of the account.
          required: true
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of namespaces to return.
        - name: id
          in: query
          type: string
          description: Namespace identifier up to which namespace objects are returned.
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of namespaces information.
            items:
              $ref: "#/definitions/NamespaceInfoDTO"
        "409":
          description: invalid argument
  /account/namespaces:
    post:
      tags:
        - Namespace routes
      summary: Get namespaces for given array of addresses
      description: Gets namespaces for a given array of addresses.
      operationId: getNamespacesFromAccounts
      produces:
        - application/json
      parameters:
        - name: accountIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/accountIds"
        - name: pageSize
          in: query
          type: integer
          format: int32
          description: Number of namespaces to return.
        - name: id
          in: query
          type: string
          description: Namespace identifier up to which namespace objects are returned.
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of namespaces information.
            items:
              $ref: "#/definitions/NamespaceInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /account/names:
    post:
      tags:
        - Account routes
      summary: Get readable names for a set of accountIds.
      description: Returns friendly names for accounts.
      operationId: getAccountsNames
      produces:
        - application/json
      parameters:
        - name: accountIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/accountIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of account names.
            items:
              $ref: "#/definitions/AccountNamesDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /namespace/names:
    post:
      tags:
        - Namespace routes
      summary: Get readable names for a set of namespaces
      description: Returns friendly names for namespaces.
      operationId: getNamespacesNames
      produces:
        - application/json
      parameters:
        - name: namespaceIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/namespaceIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of namespace names.
            items:
              $ref: "#/definitions/NamespaceNameDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transaction/{transactionId}":
    get:
      tags:
        - Transaction routes
      summary: Get transaction information
      description: Returns transaction information given a transactionId or hash.
      operationId: getTransaction
      produces:
        - application/json
      parameters:
        - name: transactionId
          in: path
          type: string
          description: Identifier of the transaction or hash.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/TransactionInfoDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /transaction:
    post:
      tags:
        - Transaction routes
      summary: Get transactions information
      description: Returns transactions information for a given array of transactionIds.
      operationId: getTransactions
      produces:
        - application/json
      parameters:
        - name: transactionIds
          in: body
          required: true
          schema:
            $ref: "#/definitions/transactionIds"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of transactions information.
            items:
              $ref: "#/definitions/TransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
    put:
      tags:
        - Transaction routes
      summary: Announce a new transaction
      description: |
        Announces a transaction to the network. It is recommended to use the
        NEM2-SDK to announce transactions as they should be serialized.
      operationId: announceTransaction
      produces:
        - application/json
      parameters:
        - name: transactionPayload
          in: body
          required: true
          schema:
            $ref: "#/definitions/transactionPayload"
      responses:
        "202":
          description: success
          schema:
            $ref: "#/definitions/AnnounceTransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /transaction/partial:
    put:
      tags:
        - Transaction routes
      summary: Announce an aggregate bonded transaction
      description: Announces an aggregate bonded transaction to the network.
      operationId: announcePartialTransaction
      produces:
        - application/json
      parameters:
        - name: transactionPayload
          in: body
          required: true
          schema:
            $ref: "#/definitions/transactionPayload"
      responses:
        "202":
          description: success
          schema:
            $ref: "#/definitions/AnnounceTransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /transaction/cosignature:
    put:
      tags:
        - Transaction routes
      summary: Announce a cosignature transaction
      description: Announces a cosignature transaction to the network.
      operationId: announceCosignatureTransaction
      produces:
        - application/json
      parameters:
        - name: cosignature
          in: body
          required: true
          schema:
            $ref: "#/definitions/cosignature"
      responses:
        "202":
          description: success
          schema:
            $ref: "#/definitions/AnnounceTransactionInfoDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  "/transaction/{hash}/status":
    get:
      tags:
        - Transaction routes
      summary: Get transaction status
      description: Returns the transaction status for a given hash.
      operationId: getTransactionStatus
      produces:
        - application/json
      parameters:
        - name: hash
          in: path
          type: string
          description: Hash of the transaction.
          required: true
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/TransactionStatusDTO"
        "404":
          description: resource not found
        "409":
          description: invalid argument
  /transaction/statuses:
    post:
      tags:
        - Transaction routes
      summary: Get transactions status.
      description: Returns an array of transaction statuses for a given array of
        transaction hashes.
      operationId: getTransactionsStatuses
      produces:
        - application/json
      parameters:
        - name: transactionHashes
          in: body
          required: true
          schema:
            $ref: "#/definitions/transactionHashes"
      responses:
        "200":
          description: success
          schema:
            type: array
            description: Array of transactions status.
            items:
              $ref: "#/definitions/TransactionStatusDTO"
        "400":
          description: invalid content
        "409":
          description: invalid argument
  /network:
    get:
      tags:
        - Network routes
      summary: Get the current network type of the chain
      description: Returns the current network type.
      operationId: getNetworkType
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/NetworkTypeDTO"
  /node/info:
    get:
      tags:
        - Node routes
      summary: Get the node information
      description: |
        Supplies additional information about the application running on a node.
      operationId: getNodeInfo
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/NodeInfoDTO"
  /node/time:
    get:
      tags:
        - Node routes
      summary: Get the node time
      description: Gets the node time at the moment the reply was sent and received.
      operationId: getNodeTime
      produces:
        - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/NodeTimeDTO"
definitions:
  # Enumerations
  AccountRestrictionTypeEnum:
    type: integer
    format: int32
    example: 1
    enum:
      - 1
      - 2
      - 4
      - 5
      - 65
      - 129
      - 130
      - 132
      - 193
    description: |
      Type of account restriction:
      * 0x01 (1 decimal) - Allow only incoming transactions from a given address.
      * 0x02 (2 decimal) - Allow only incoming transactions containing a given mosaic identifier.
      * 0x04 (4 decimal) - Allow only outgoing transactions with a given transaction type.
      * 0x05 (5 decimal) - Account restriction sentinel.
      * 0x41 (65 decimal) - Allow only outgoing transactions to a given address.
      * 0x81 (129 decimal) - Block incoming transactions from a given address.
      * 0x82 (130 decimal) - Block incoming transactions containing a given mosaic identifier.
      * 0x84 (132 decimal) - Block outgoing transactions with a given transaction type.
      * 0xC1 (193 decimal) - Block outgoing transactions to a given address.
  AliasTypeEnum:
    type: integer
    format: int32
    enum:
      - 0
      - 1
      - 2
    description: |
      Type of alias:
      * 0 - No alias.
      * 1 - Mosaic id alias.
      * 2 - Addres alias.
    example: 0
  MosaicPropertyIdEnum:
    type: integer
    format: int32
    enum:
      - 0
      - 1
      - 2
    description: |
      Identifier of the mosaic property:
      * 0 - MosaicFlags
      * 1 - Divisibility
      * 2 - Duration
    example: 0
  NamespaceTypeEnum:
    type: integer
    format: int32
    enum:
      - 0
      - 1
    description: |
      Type of namespace:
      * 0 - Root namespace.
      * 1 - Subnamespace.
    example: 0
  NetworkTypeEnum:
    type: integer
    format: int32
    description: |
      Version of the entity. The higher byte represents the network
      identifier:
      * 0x68 (MAIN_NET) - Public main network.
      * 0x98 (TEST_NET) - Public test network.
      * 0x60 (MIJIN) - Private network.
      * 0x90 (MIJIN_TEST) - Private test network.
    example: 36867
  RolesTypeEnum:
    type: integer
    format: int32
    enum:
      - 1
      - 2
    description: |
      Role of the node:
      * 1 - A peer node.
      * 2 - An api node.
    example: 2
  # Type
  UInt64DTO:
    type: array
    items:
      type: integer
      format: int64
    example:
      - lower
      - higher
  # Account endpoints
  AccountInfoDTO:
    type: object
    required:
      - meta
      - account
    properties:
      meta:
        $ref: "#/definitions/AccountMetaDTO"
      account:
        $ref: "#/definitions/AccountDTO"
  AccountMetaDTO:
    type: object
  AccountDTO:
    type: object
    required:
      - address
      - addressHeight
      - publicKey
      - publicKeyHeight
      - accountType
      - linkedAccountKey
      - activityBuckets
      - mosaics
      - importance
      - importanceHeight
    properties:
      address:
        type: string
        description: |
          Address of the account decoded.
        example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
      addressHeight:
        $ref: "#/definitions/UInt64DTO"
      publicKey:
        type: string
        description: |
          Public key of the account. Only accounts that have already published a transaction
          have a public key assigned to the account. Otherwise, the field is
          null.
        example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      publicKeyHeight:
        $ref: "#/definitions/UInt64DTO"
      accountType:
        type: integer
        format: int32
        enum:
          - 0
          - 1
          - 2
          - 3
        description: |
          * 0 - Unlinked.
          * 1 - Balance-holding account that is linked to a remote harvester account.
          * 2 - Remote harvester account that is linked to a balance-holding account.
          * 3 - Remote harvester eligible account that is unlinked.
      linkedAccountKey:
        type: string
      activityBuckets:
        type: array
        items:
          type: object
      mosaics:
        type: array
        description: |
          Mosaic units owned. The amount is represented in
          absolute amount. Thus a balance of 123456789 for a mosaic with
          divisibility 6 (absolute) means the account owns 123.456789.
        items:
          $ref: "#/definitions/MosaicDTO"
      importance:
        $ref: "#/definitions/UInt64DTO"
      importanceHeight:
        $ref: "#/definitions/UInt64DTO"
  AccountNamesDTO:
    type: object
    required:
      - address
      - names
    properties:
      address:
        type: string
        description: Address of the account decoded.
        example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
      names:
        type: array
        description: Account linked namespace names.
        example:
          - alias1
          - alias2
        items:
          type: string
  AccountRestrictionsInfoDTO:
    type: object
    required:
      - accountRestrictions
    properties:
      accountRestrictions:
        $ref: "#/definitions/AccountRestrictionsDTO"
  AccountRestrictionsDTO:
    type: object
    required:
      - address
      - restrictions
    properties:
      address:
        type: string
        description: Address of the account decoded.
        example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
      restrictions:
        type: array
        items:
          $ref: "#/definitions/AccountRestrictionDTO"
  AccountRestrictionDTO:
    type: object
    required:
      - restrictionType
      - values
    properties:
      restrictionType:
        $ref: "#/definitions/AccountRestrictionTypeEnum"
      values:
        type: array
        description: Address, transaction type, or mosaic id to restrict.
        items:
          type: object
  MultisigAccountGraphInfoDTO:
    type: object
    required:
      - level
      - multisigEntries
    properties:
      level:
        type: integer
        format: int32
        description: Level of the multisig account.
        example: 0
      multisigEntries:
        type: array
        description: Array of multisig accounts for this level.
        items:
          $ref: "#/definitions/MultisigAccountInfoDTO"
  MultisigAccountInfoDTO:
    type: object
    required:
      - multisig
    properties:
      multisig:
        $ref: "#/definitions/MultisigDTO"
  MultisigDTO:
    type: object
    required:
      - account
      - minApproval
      - minRemoval
      - cosignatories
      - multisigAccounts
    properties:
      account:
        type: string
        description: Public key of the account.
        example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      accountAddress:
        type: string
        description: Address of the account decoded.
        example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
      minApproval:
        type: integer
        format: int32
        description: Number of signatures needed to approve a transaction.
        example: 2
      minRemoval:
        description: Number of signatures needed to remove a cosignatory.
        type: integer
        format: int32
        example: 1
      cosignatories:
        type: array
        description: Array of public keys of the cosignatory accounts.
        example:
          - 5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C
          - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        items:
          type: string
      multisigAccounts:
        type: array
        description: Array of multisig accounts where the account is cosignatory.
        example:
          - 565059F55E68F904214E8BE1D610B5BBEA4CE46CC13D246D45BC1DAE5D32A0D2
        items:
          type: string

  # Blockchain endpoints
  BlockInfoDTO:
    type: object
    required:
      - meta
      - block
    properties:
      meta:
        $ref: "#/definitions/BlockMetaDTO"
      block:
        $ref: "#/definitions/BlockDTO"
  BlockMetaDTO:
    type: object
    required:
      - hash
      - generationHash
      - totalFee
      - subCacheMerkleRoots
      - numTransactions
    properties:
      hash:
        type: string
        example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
      generationHash:
        type: string
        example: 876614A913BAA95E64451290BB3BAD476625F0EB27CA7953EC7F802CC9FBB18D
      subCacheMerkleRoots:
        type: array
        items:
          type: string
          format: hex
        example:
          - 782451A35BCE10E5DCB2BBB5A1A8C067F8673DC65EB6BAAE3EE533044BF742CC
          - 646AE657A9717BECF338279C45613C8F64FB69572E22F4CAE2A36097C2190F02
          - 65D0CDEB6F8C29A9B164C64FFBC7AD97DF2BA407FE868E1BBC11983DBFF3FB5A
          - 0000000000000000000000000000000000000000000000000000000000000000
          - 0000000000000000000000000000000000000000000000000000000000000000
          - 0000000000000000000000000000000000000000000000000000000000000000
          - 0000000000000000000000000000000000000000000000000000000000000000
      totalFee:
        $ref: "#/definitions/UInt64DTO"
      numTransactions:
        type: integer
        format: int32
        example: 0
      numStatements:
        type: integer
        format: int32
        example: 1
  BlockDTO:
    type: object
    required:
      - signature
      - signer
      - version
      - type
      - height
      - timestamp
      - difficulty
      - feeMultiplier
      - previousBlockHash
      - blockTransactionsHash
      - blockReceiptsHash
      - stateHash
      - beneficiary
    properties:
      signature:
        type: string
        description: |
          Signature of the block generated by the
          signer. It can be used to validate tha the entity data was not
          modified by a node.
        example: D8047EB8285077D9900EDD42F4081070DDB26E08E7F15A3E29642C80CF0C7D68340682DC9868C73EB09744D6298146D8DFC02ED47070FC81FB47D6F73B33EF0A
      signer:
        type: string
        description: Public key of the signer account.
        example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
      version:
        $ref: "#/definitions/NetworkTypeEnum"
      type:
        type: integer
        format: int32
        description: |
          Type of the block:
          * 0x8043 (32835 decimal) - Nemesis block.
          * 0x8143 (33091 decimal) - Regular block.
      height:
        $ref: "#/definitions/UInt64DTO"
      timestamp:
        $ref: "#/definitions/UInt64DTO"
      difficulty:
        $ref: "#/definitions/UInt64DTO"
      feeMultiplier:
        type: integer
        format: int32
        description: Fee multiplier applied to transactions contained in block.
        example: 0
      previousBlockHash:
        type: string
        description: Hash of the previous block.
        example:
          - 0000000000000000000000000000000000000000000000000000000000000000
      blockTransactionsHash:
        type: string
        description: |
          Transactions included in a block are hashed forming a merkle
          tree. The root of the tree summarizes them.
        example: 8F8C6EB33332F69196AD0D30D7CD90FAC1332089DF460DF0CF4A8A28C1C17AD4
      blockReceiptsHash:
        type: string
        description: |
          Collection of receipts  are hashed into a merkle tree and linked
          to a block. The block header stores the root hash.
        example: sZznHmvGSZKIy1Ney2O0tKxJ4sOgk5jYYhqsua1RCRo=
      stateHash:
        type: string
        description: |
          For each block, the state of the blockchain is stored in RocksDB,
          forming a patricia tree. The root of the tree summarizes the state of the blockchain for the given block.
        example: 011811795453FA9FBD9DAC969085F8938BBFEDE3A3FDDC0C93B8FD6C4E7B2840
      beneficiary:
        type: string
        description: Public key of the optional beneficiary designated by harvester.
        example: 0000000000000000000000000000000000000000000000000000000000000000
  HeightInfoDTO:
    type: object
    required:
      - height
    properties:
      height:
        $ref: "#/definitions/UInt64DTO"
  BlockchainScoreDTO:
    type: object
    required:
      - scoreHigh
      - scoreLow
    properties:
      scoreHigh:
        $ref: "#/definitions/UInt64DTO"
      scoreLow:
        $ref: "#/definitions/UInt64DTO"
  MerkleProofInfoDTO:
    type: object
    properties:
      merklePath:
        type: array
        description: Complementary data needed to calculate the merkle root.
        items:
          $ref: "#/definitions/merklePathItem"
  StatementsDTO:
    type: object
    description: Collection of transaction statements and resolutions triggered for the block requested.
    required:
      - transactionStatements
      - addressResolutionStatements
      - mosaicResolutionStatements
    properties:
      transactionStatements:
        type: array
        description: Array of transaction statements for the block requested.
        items:
          $ref: "#/definitions/TransactionStatementDTO"
      addressResolutionStatements:
        type: array
        description: Array of address resolutions for the block requested.
        items:
          $ref: "#/definitions/ResolutionStatementDTO"
      mosaicResolutionStatements:
        type: array
        description: Array of mosaic resolutions for the block requested.
        items:
          $ref: "#/definitions/ResolutionStatementDTO"
  TransactionStatementDTO:
    type: object
    description: Collection of receipts related to a transaction.
    required:
      - height
      - source
      - receipts
    properties:
      height:
        $ref: "#/definitions/UInt64DTO"
      source:
        $ref: "#/definitions/SourceDTO"
      receipts:
        type: array
        description: Array of receipts.
        items:
          type: object
  ResolutionStatementDTO:
    type: object
    description: A resolution statement keeps the relation between a namespace alias used in a transaction and the real address or mosaicId.
    required:
      - height
      - unresolved
      - resolutionEntries
    properties:
      height:
        $ref: "#/definitions/UInt64DTO"
      unresolved:
        $ref: "#/definitions/UInt64DTO"
      resolutionEntries:
        type: array
        description: Array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single UInt64 field since within one block the resolution might change for different sources due to alias related transactions.
        items:
          $ref: "#/definitions/ResolutionEntryDTO"
  ResolutionEntryDTO:
    type: object
    required:
      - source
      - resolved
    properties:
      source:
        $ref: "#/definitions/SourceDTO"
      resolved:
        $ref: "#/definitions/UInt64DTO"
  SourceDTO:
    type: object
    description: Transaction that triggered the receipt.
    required:
      - primaryId
      - secondaryId
    properties:
      primaryId:
        type: integer
        format: int32
        description: Transaction index within the block.
        example: 1
      secondaryId:
        type: integer
        format: int32
        description: Transaction index inside within the aggregate transaction. If the transaction is not an inner transaction, then the secondary id is set to 0.
        example: 0
  # Diagnostic endpoints
  StorageInfoDTO:
    type: object
    required:
      - numBlocks
      - numTransactions
      - numAccounts
    properties:
      numBlocks:
        type: integer
        format: int64
        description: Number of blocks stored.
        example: 245053
      numTransactions:
        type: integer
        format: int64
        description: Number of transactions stored.
        example: 58590
      numAccounts:
        type: integer
        format: int64
        description: Number of accounts created.
        example: 177
  ServerDTO:
    type: object
    required:
      - serverInfo
    properties:
      serverInfo:
        $ref: "#/definitions/ServerInfoDTO"
  ServerInfoDTO:
    type: object
    required:
      - restVersion
      - sdkVersion
    properties:
      restVersion:
        type: string
        example: 1.0.14
        description: catapult-rest component version.
      sdkVersion:
        type: string
        example: 0.7.14
        description: catapult-sdk component version.

  # Mosaics endpoints
  MosaicMetaDTO:
    type: object
    required:
      - id
    properties:
      id:
        type: string
  MosaicDTO:
    type: object
    required:
      - id
      - amount
    properties:
      id:
        $ref: "#/definitions/UInt64DTO"
      amount:
        $ref: "#/definitions/UInt64DTO"
  MosaicInfoDTO:
    type: object
    required:
      - meta
      - mosaic
    properties:
      meta:
        $ref: "#/definitions/MosaicMetaDTO"
      mosaic:
        $ref: "#/definitions/MosaicDefinitionDTO"
  MosaicDefinitionDTO:
    type: object
    required:
      - mosaicId
      - supply
      - height
      - owner
      - properties
      - revision
    properties:
      mosaicId:
        $ref: "#/definitions/UInt64DTO"
      supply:
        $ref: "#/definitions/UInt64DTO"
      height:
        $ref: "#/definitions/UInt64DTO"
      owner:
        type: string
        description: Public key of the mosaic owner.
        example: EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85
      revision:
        type: integer
        format: int32
        description: Number of definitions for the same mosaic.
        example: 1
      properties:
        type: array
        items:
          $ref: "#/definitions/MosaicPropertyDTO"
  MosaicPropertyDTO:
    type: object
    properties:
      id:
        $ref: "#/definitions/MosaicPropertyIdEnum"
      value:
        $ref: "#/definitions/UInt64DTO"
  MosaicNamesDTO:
    type: object
    required:
      - mosaicId
      - names
    properties:
      mosaicId:
        $ref: "#/definitions/UInt64DTO"
      names:
        type: array
        description: Mosaic linked namespace names.
        example:
          - cat.currency
        items:
          type: string

  # Namespace endpoints
  NamespaceMetaDTO:
    type: object
    required:
      - id
      - active
      - index
    properties:
      id:
        type: string
      active:
        type: boolean
      index:
        type: integer
        format: int32
  NamespaceInfoDTO:
    type: object
    required:
      - meta
      - namespace
    properties:
      meta:
        $ref: "#/definitions/NamespaceMetaDTO"
      namespace:
        $ref: "#/definitions/NamespaceDTO"
  NamespaceDTO:
    type: object
    required:
      - owner
      - ownerAddress
      - startHeight
      - endHeight
      - depth
      - level0
      - type
      - alias
      - parentId
    properties:
      owner:
        type: string
        description: Public key of the owner of the namespace.
        example: EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85
      ownerAddress:
        type: string
        description: Address of the owner of the namespace decoded.
        example: 906CBD9B8EC88014F7A4181B00C1837646BD46E504E3D72C44
      startHeight:
        $ref: "#/definitions/UInt64DTO"
      endHeight:
        $ref: "#/definitions/UInt64DTO"
      depth:
        type: integer
        format: int32
        description: Level of the namespace.
        example: 1
      level0:
        $ref: "#/definitions/UInt64DTO"
      level1:
        $ref: "#/definitions/UInt64DTO"
      level2:
        $ref: "#/definitions/UInt64DTO"
      type:
        $ref: "#/definitions/NamespaceTypeEnum"
      alias:
        $ref: "#/definitions/AliasDTO"
      parentId:
        $ref: "#/definitions/UInt64DTO"
  NamespaceNameDTO:
    type: object
    required:
      - namespaceId
      - name
    properties:
      parentId:
        $ref: "#/definitions/UInt64DTO"
      namespaceId:
        $ref: "#/definitions/UInt64DTO"
      name:
        type: string
        description: Name of the namespace.
        example: cat
  AliasDTO:
    type: object
    required:
      - type
    properties:
      type:
        $ref: "#/definitions/AliasTypeEnum"
      mosaicId:
        $ref: "#/definitions/UInt64DTO"
      address:
        type: string
        description: Aliased address in hexadecimal.

  # Transaction endpoints
  TransactionMetaDTO:
    type: object
    required:
      - height
      - hash
      - merkleComponentHash
      - index
      - id
    properties:
      height:
        $ref: "#/definitions/UInt64DTO"
      hash:
        type: string
      merkleComponentHash:
        type: string
      index:
        type: integer
        format: int32
      id:
        type: string
  TransactionInfoDTO:
    type: object
    required:
      - meta
      - transaction
    properties:
      meta:
        $ref: "#/definitions/TransactionMetaDTO"
      transaction:
        type: object
  AnnounceTransactionInfoDTO:
    type: object
    required:
      - message
    properties:
      message:
        type: string
  TransactionStatusDTO:
    type: object
    required:
      - status
    properties:
      group:
        type: string
      status:
        type: string
      hash:
        type: string
      deadline:
        $ref: "#/definitions/UInt64DTO"
      height:
        $ref: "#/definitions/UInt64DTO"
    example: 0

  # Network endpoints
  NetworkTypeDTO:
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
        description: Name of the network.
        example: mijinTest
      description:
        type: string
        description: A short text describing the network.
        example: catapult development network

  # Node endpoints
  NodeInfoDTO:
    type: object
    required:
      - publicKey
      - port
      - networkIdentifier
      - version
      - roles
      - host
      - friendlyName
    properties:
      publicKey:
        type: string
        description: Public key used to identify the node.
        example: EB6839C7E6BD0031FDD5F8CB5137E9BC950D7EE7756C46B767E68F3F58C24390
      port:
        type: integer
        description: Port used for the communication.
        format: int32
        example: 7900
      networkIdentifier:
        type: integer
        format: int32
        example: 144
      version:
        type: integer
        description: Version of the application.
        format: int32
        example: 0
      roles:
        $ref: "#/definitions/RolesTypeEnum"
      host:
        type: string
        description: IP address of the endpoint.
        example: 127.0.0.1
      friendlyName:
        type: string
        description: Name of the node.
        example: api-node-0
  NodeTimeDTO:
    type: object
    required:
      - communicationTimestamps
    properties:
      communicationTimestamps:
        $ref: "#/definitions/communicationTimestamps"

  # Request bodies
  mosaicIds:
    type: object
    properties:
      mosaicIds:
        type: array
        description: Array of mosaic identifiers.
        items:
          type: string
          format: hex
        example:
          - d525ad41d95fcf29
  namespaceIds:
    type: object
    properties:
      namespaceIds:
        type: array
        description: Array of namespace identifiers.
        items:
          type: string
          format: hex
        example:
          - 84b3552d375ffa4b
  accountIds:
    type: object
    properties:
      publicKeys:
        type: array
        description: Array of public keys.
        items:
          type: string
        example:
          - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      addresses:
        type: array
        description: Array of addresses.
        items:
          type: string
        example:
          - SDRDGFTDLLCB67D4HPGIMIHPNSRYRJRT7DOBGWZY
          - SBCPGZ3S2SCC3YHBBTYDCUZV4ZZEPHM2KGCP4QXX
  transactionIds:
    type: object
    properties:
      transactionIds:
        type: array
        description: Array of transaction ids.
        items:
          type: string
        example:
          - 59B8DA0F0CB2720001103922
          - 59B8D8E60CB2720001103904
  transactionHashes:
    type: object
    properties:
      hashes:
        type: array
        description: Array of transaction hashes.
        items:
          type: string
        example:
          - 5AF72FE39C0515E823903918A0BFE9625DD752C7BD63969C8869F25E9D155DE5
  transactionPayload:
    type: object
    properties:
      payload:
        type: string
        description: Transaction payload.
  cosignature:
    type: object
    properties:
      parentHash:
        type: string
        description: Hash of parent aggregate transaction that has been signed by a cosignatory of the transaction.
      signature:
        type: string
        description: Signatures generated by signing the parent aggregate transaction hash.
      signer:
        type: string
        description: Signer of the transaction.
  merklePathItem:
    type: object
    properties:
      position:
        type: integer
        format: int32
        example: 1
      hash:
        type: string
  communicationTimestamps:
    type: object
    properties:
      sendTimestamp:
        $ref: "#/definitions/UInt64DTO"
      receiveTimestamp:
        $ref: "#/definitions/UInt64DTO"
externalDocs:
  description: NEM Developer Center
  url: 'https://nemtech.github.io/'