// tslint:disable
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    ServerDTO,
    StorageInfoDTO,
} from '../models';

/**
 * no description
 */
export class DiagnosticRoutesApi extends BaseAPI {

    /**
     * Returns diagnostic information about the node storage.
     * Get the storage information of the node
     */
    getDiagnosticStorage(): Observable<StorageInfoDTO> {
        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<StorageInfoDTO>({
            path: `/diagnostic/storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns the version of the running rest component.
     * Get the version of the running rest component
     */
    getServerInfo(): Observable<ServerDTO> {
        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<ServerDTO>({
            path: `/diagnostic/server`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

}
