// tslint:disable
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    BlockInfoDTO,
    MerkleProofInfoDTO,
    StatementsDTO,
    TransactionInfoDTO,
} from '../models';

export interface GetBlockByHeightRequest {
    height: number;
}

export interface GetBlockReceiptsRequest {
    height: number;
}

export interface GetBlockTransactionsRequest {
    height: number;
    pageSize?: number;
    id?: string;
}

export interface GetBlocksByHeightWithLimitRequest {
    height: number;
    limit: GetBlocksByHeightWithLimitLimitEnum;
}

export interface GetMerkleReceiptsRequest {
    height: number;
    hash: string;
}

export interface GetMerkleTransactionRequest {
    height: number;
    hash: string;
}

/**
 * no description
 */
export class BlockRoutesApi extends BaseAPI {

    /**
     * Gets a block from the chain that has the given height.
     * Get block information
     */
    getBlockByHeight(requestParameters: GetBlockByHeightRequest): Observable<BlockInfoDTO> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getBlockByHeight.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<BlockInfoDTO>({
            path: `/block/{height}`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns the receipts linked to a block.
     * Get receipts from a block
     */
    getBlockReceipts(requestParameters: GetBlockReceiptsRequest): Observable<StatementsDTO> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getBlockReceipts.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<StatementsDTO>({
            path: `/block/{height}/receipts`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns an array of transactions included in a block for a given block height.
     * Get transactions from a block
     */
    getBlockTransactions(requestParameters: GetBlockTransactionsRequest): Observable<Array<TransactionInfoDTO>> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getBlockTransactions.');
        }

        const queryParameters: HttpQuery = {};

        if (requestParameters.pageSize !== undefined && requestParameters.pageSize !== null) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: HttpHeaders = {};

        return this.request<Array<TransactionInfoDTO>>({
            path: `/block/{height}/transactions`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Gets up to limit number of blocks after given block height.
     * Get blocks information
     */
    getBlocksByHeightWithLimit(requestParameters: GetBlocksByHeightWithLimitRequest): Observable<Array<BlockInfoDTO>> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getBlocksByHeightWithLimit.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getBlocksByHeightWithLimit.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<Array<BlockInfoDTO>>({
            path: `/blocks/{height}/limit/{limit}`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))).replace(`{${"limit"}}`, encodeURIComponent(String(requestParameters.limit))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns the merkle path for a receipt statement or resolution linked to a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the receipt was linked with the block. 
     * Get the merkle path for a given a receipt statement hash and block
     */
    getMerkleReceipts(requestParameters: GetMerkleReceiptsRequest): Observable<MerkleProofInfoDTO> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getMerkleReceipts.');
        }

        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getMerkleReceipts.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<MerkleProofInfoDTO>({
            path: `/block/{height}/receipt/{hash}/merkle`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))).replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns the merkle path for a transaction included in a block. The path is the complementary data needed to calculate the merkle root. A client can compare if the calculated root equals the one recorded in the block header, verifying that the transaction was included in the block. 
     * Get the merkle path for a given a transaction and block
     */
    getMerkleTransaction(requestParameters: GetMerkleTransactionRequest): Observable<MerkleProofInfoDTO> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getMerkleTransaction.');
        }

        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getMerkleTransaction.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<MerkleProofInfoDTO>({
            path: `/block/{height}/transaction/{hash}/merkle`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))).replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetBlocksByHeightWithLimitLimitEnum {
    NUMBER_25 = 25,
    NUMBER_50 = 50,
    NUMBER_75 = 75,
    NUMBER_100 = 100
}
