// tslint:disable
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    MosaicIds,
    MosaicInfoDTO,
    MosaicNamesDTO,
} from '../models';

export interface GetMosaicRequest {
    mosaicId: string;
}

export interface GetMosaicsRequest {
    mosaicIds: MosaicIds;
}

export interface GetMosaicsNamesRequest {
    mosaicIds: MosaicIds;
}

/**
 * no description
 */
export class MosaicRoutesApi extends BaseAPI {

    /**
     * Gets the mosaic definition for a given mosaicId.
     * Get mosaic information
     */
    getMosaic(requestParameters: GetMosaicRequest): Observable<MosaicInfoDTO> {
        if (requestParameters.mosaicId === null || requestParameters.mosaicId === undefined) {
            throw new RequiredError('mosaicId','Required parameter requestParameters.mosaicId was null or undefined when calling getMosaic.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<MosaicInfoDTO>({
            path: `/mosaic/{mosaicId}`.replace(`{${"mosaicId"}}`, encodeURIComponent(String(requestParameters.mosaicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Gets an array of mosaic definition.
     * Get mosaics information for an array of mosaics
     */
    getMosaics(requestParameters: GetMosaicsRequest): Observable<Array<MosaicInfoDTO>> {
        if (requestParameters.mosaicIds === null || requestParameters.mosaicIds === undefined) {
            throw new RequiredError('mosaicIds','Required parameter requestParameters.mosaicIds was null or undefined when calling getMosaics.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<Array<MosaicInfoDTO>>({
            path: `/mosaic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.mosaicIds,
        });
    }

    /**
     * Returns friendly names for mosaics.
     * Get readable names for a set of mosaics
     */
    getMosaicsNames(requestParameters: GetMosaicsNamesRequest): Observable<Array<MosaicNamesDTO>> {
        if (requestParameters.mosaicIds === null || requestParameters.mosaicIds === undefined) {
            throw new RequiredError('mosaicIds','Required parameter requestParameters.mosaicIds was null or undefined when calling getMosaicsNames.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<Array<MosaicNamesDTO>>({
            path: `/mosaic/names`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.mosaicIds,
        });
    }

}
