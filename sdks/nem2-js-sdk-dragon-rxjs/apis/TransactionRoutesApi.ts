// tslint:disable
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    AnnounceTransactionInfoDTO,
    Cosignature,
    TransactionHashes,
    TransactionIds,
    TransactionInfoDTO,
    TransactionPayload,
    TransactionStatusDTO,
} from '../models';

export interface AnnounceCosignatureTransactionRequest {
    cosignature: Cosignature;
}

export interface AnnouncePartialTransactionRequest {
    transactionPayload: TransactionPayload;
}

export interface AnnounceTransactionRequest {
    transactionPayload: TransactionPayload;
}

export interface GetTransactionRequest {
    transactionId: string;
}

export interface GetTransactionStatusRequest {
    hash: string;
}

export interface GetTransactionsRequest {
    transactionIds: TransactionIds;
}

export interface GetTransactionsStatusesRequest {
    transactionHashes: TransactionHashes;
}

/**
 * no description
 */
export class TransactionRoutesApi extends BaseAPI {

    /**
     * Announces a cosignature transaction to the network.
     * Announce a cosignature transaction
     */
    announceCosignatureTransaction(requestParameters: AnnounceCosignatureTransactionRequest): Observable<AnnounceTransactionInfoDTO> {
        if (requestParameters.cosignature === null || requestParameters.cosignature === undefined) {
            throw new RequiredError('cosignature','Required parameter requestParameters.cosignature was null or undefined when calling announceCosignatureTransaction.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<AnnounceTransactionInfoDTO>({
            path: `/transaction/cosignature`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cosignature,
        });
    }

    /**
     * Announces an aggregate bonded transaction to the network.
     * Announce an aggregate bonded transaction
     */
    announcePartialTransaction(requestParameters: AnnouncePartialTransactionRequest): Observable<AnnounceTransactionInfoDTO> {
        if (requestParameters.transactionPayload === null || requestParameters.transactionPayload === undefined) {
            throw new RequiredError('transactionPayload','Required parameter requestParameters.transactionPayload was null or undefined when calling announcePartialTransaction.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<AnnounceTransactionInfoDTO>({
            path: `/transaction/partial`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transactionPayload,
        });
    }

    /**
     * Announces a transaction to the network. It is recommended to use the NEM2-SDK to announce transactions as they should be serialized. 
     * Announce a new transaction
     */
    announceTransaction(requestParameters: AnnounceTransactionRequest): Observable<AnnounceTransactionInfoDTO> {
        if (requestParameters.transactionPayload === null || requestParameters.transactionPayload === undefined) {
            throw new RequiredError('transactionPayload','Required parameter requestParameters.transactionPayload was null or undefined when calling announceTransaction.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<AnnounceTransactionInfoDTO>({
            path: `/transaction`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transactionPayload,
        });
    }

    /**
     * Returns transaction information given a transactionId or hash.
     * Get transaction information
     */
    getTransaction(requestParameters: GetTransactionRequest): Observable<TransactionInfoDTO> {
        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling getTransaction.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<TransactionInfoDTO>({
            path: `/transaction/{transactionId}`.replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns the transaction status for a given hash.
     * Get transaction status
     */
    getTransactionStatus(requestParameters: GetTransactionStatusRequest): Observable<TransactionStatusDTO> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getTransactionStatus.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<TransactionStatusDTO>({
            path: `/transaction/{hash}/status`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Returns transactions information for a given array of transactionIds.
     * Get transactions information
     */
    getTransactions(requestParameters: GetTransactionsRequest): Observable<Array<TransactionInfoDTO>> {
        if (requestParameters.transactionIds === null || requestParameters.transactionIds === undefined) {
            throw new RequiredError('transactionIds','Required parameter requestParameters.transactionIds was null or undefined when calling getTransactions.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<Array<TransactionInfoDTO>>({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transactionIds,
        });
    }

    /**
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * Get transactions status.
     */
    getTransactionsStatuses(requestParameters: GetTransactionsStatusesRequest): Observable<Array<TransactionStatusDTO>> {
        if (requestParameters.transactionHashes === null || requestParameters.transactionHashes === undefined) {
            throw new RequiredError('transactionHashes','Required parameter requestParameters.transactionHashes was null or undefined when calling getTransactionsStatuses.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<Array<TransactionStatusDTO>>({
            path: `/transaction/statuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transactionHashes,
        });
    }

}
