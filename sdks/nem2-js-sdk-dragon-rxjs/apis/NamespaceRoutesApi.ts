// tslint:disable
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    AccountIds,
    NamespaceIds,
    NamespaceInfoDTO,
    NamespaceNameDTO,
} from '../models';

export interface GetNamespaceRequest {
    namespaceId: string;
}

export interface GetNamespacesFromAccountRequest {
    accountId: string;
    pageSize?: number;
    id?: string;
}

export interface GetNamespacesFromAccountsRequest {
    accountIds: AccountIds;
    pageSize?: number;
    id?: string;
}

export interface GetNamespacesNamesRequest {
    namespaceIds: NamespaceIds;
}

/**
 * no description
 */
export class NamespaceRoutesApi extends BaseAPI {

    /**
     * Gets the namespace for a given namespaceId.
     * Get namespace information
     */
    getNamespace(requestParameters: GetNamespaceRequest): Observable<NamespaceInfoDTO> {
        if (requestParameters.namespaceId === null || requestParameters.namespaceId === undefined) {
            throw new RequiredError('namespaceId','Required parameter requestParameters.namespaceId was null or undefined when calling getNamespace.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        return this.request<NamespaceInfoDTO>({
            path: `/namespace/{namespaceId}`.replace(`{${"namespaceId"}}`, encodeURIComponent(String(requestParameters.namespaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Gets an array of namespaces for a given account address.
     * Get namespaces owned by an account
     */
    getNamespacesFromAccount(requestParameters: GetNamespacesFromAccountRequest): Observable<Array<NamespaceInfoDTO>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getNamespacesFromAccount.');
        }

        const queryParameters: HttpQuery = {};

        if (requestParameters.pageSize !== undefined && requestParameters.pageSize !== null) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: HttpHeaders = {};

        return this.request<Array<NamespaceInfoDTO>>({
            path: `/account/{accountId}/namespaces`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     * Gets namespaces for a given array of addresses.
     * Get namespaces for given array of addresses
     */
    getNamespacesFromAccounts(requestParameters: GetNamespacesFromAccountsRequest): Observable<Array<NamespaceInfoDTO>> {
        if (requestParameters.accountIds === null || requestParameters.accountIds === undefined) {
            throw new RequiredError('accountIds','Required parameter requestParameters.accountIds was null or undefined when calling getNamespacesFromAccounts.');
        }

        const queryParameters: HttpQuery = {};

        if (requestParameters.pageSize !== undefined && requestParameters.pageSize !== null) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.id !== undefined && requestParameters.id !== null) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<Array<NamespaceInfoDTO>>({
            path: `/account/namespaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.accountIds,
        });
    }

    /**
     * Returns friendly names for namespaces.
     * Get readable names for a set of namespaces
     */
    getNamespacesNames(requestParameters: GetNamespacesNamesRequest): Observable<Array<NamespaceNameDTO>> {
        if (requestParameters.namespaceIds === null || requestParameters.namespaceIds === undefined) {
            throw new RequiredError('namespaceIds','Required parameter requestParameters.namespaceIds was null or undefined when calling getNamespacesNames.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return this.request<Array<NamespaceNameDTO>>({
            path: `/namespace/names`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.namespaceIds,
        });
    }

}
